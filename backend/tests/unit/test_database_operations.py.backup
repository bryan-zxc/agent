"""
Database Operations Test Suite

Tests core async database functionality including schema migrations,
JSON column operations, and concurrent access patterns.
"""

import unittest
import asyncio
import tempfile
import json
import uuid
import os
from unittest.mock import patch, AsyncMock
from pathlib import Path

from src.agent.models.agent_database import AgentDatabase


class TestDatabaseOperations(unittest.IsolatedAsyncioTestCase):
    """Test core database operations and migrations."""

    async def asyncSetUp(self):
        """Set up test database for each test."""
        # Create temporary database file
        self.db_fd, self.test_db_path = tempfile.mkstemp(suffix='.db')
        os.close(self.db_fd)  # Close file descriptor
        
        self.db = AgentDatabase(database_path=self.test_db_path)
        
        # Test data
        self.router_id = f"test_router_{uuid.uuid4().hex[:8]}"
        self.planner_id = f"test_planner_{uuid.uuid4().hex[:8]}"
        self.worker_id = f"test_worker_{uuid.uuid4().hex[:8]}"

    async def asyncTearDown(self):
        """Clean up test database."""
        try:
            os.unlink(self.test_db_path)
        except (OSError, FileNotFoundError):
            pass

    async def test_database_connection_establishment(self):
        """Test async database connection works correctly."""
        # Test basic connection by creating a router
        result = await self.db.create_router(
            router_id=self.router_id,
            status="active",
            model="gpt-4",
            temperature=0.7,
            title="Test Router",
            preview="Test preview"
        )
        # create_router returns None on success
        self.assertIsNone(result)
        
        # Verify router was actually created by fetching it
        router_data = await self.db.get_router(self.router_id)
        self.assertIsNotNone(router_data)
        self.assertEqual(router_data["router_id"], self.router_id)

    async def test_router_crud_operations(self):
        """Test router Create, Read, Update, Delete operations."""
        # Create router
        create_result = await self.db.create_router(
            router_id=self.router_id,
            status="active",
            model="gpt-4.1-nano",
            temperature=0.5,
            title="Test Router",
            preview="Router for testing"
        )
        # create_router returns None on success
        self.assertIsNone(create_result)
        
        # Read router
        router_data = await self.db.get_router(self.router_id)
        self.assertEqual(router_data["router_id"], self.router_id)
        self.assertEqual(router_data["status"], "active")
        self.assertEqual(router_data["model"], "gpt-4.1-nano")
        self.assertEqual(router_data["temperature"], 0.5)
        
        # Update router title (using available method)
        update_result = await self.db.update_router_title(
            self.router_id,
            "Updated Router"
        )
        # update_router_title returns None on success
        self.assertIsNone(update_result)
        
        # Verify update
        updated_data = await self.db.get_router(self.router_id)
        self.assertEqual(updated_data["title"], "Updated Router")
        self.assertEqual(updated_data["model"], "gpt-4.1-nano")  # Unchanged

    async def test_message_operations(self):
        """Test message storage and retrieval operations."""
        # Create router first
        await self.db.create_router(
            router_id=self.router_id,
            status="active",
            model="gpt-4",
            temperature=0.7,
            title="Test Router",
            preview="Test preview"
        )
        
        # Add messages
        user_message_id = await self.db.add_message(
            "router", self.router_id, "user", "Hello, how are you?"
        )
        self.assertIsInstance(user_message_id, int)
        
        assistant_message_id = await self.db.add_message(
            "router", self.router_id, "assistant", "I'm doing well, thank you!"
        )
        self.assertIsInstance(assistant_message_id, int)
        
        # Retrieve messages
        messages = await self.db.get_messages("router", self.router_id)
        self.assertEqual(len(messages), 2)
        
        # Verify message content
        user_msg = messages[0]
        assistant_msg = messages[1]
        
        self.assertEqual(user_msg["role"], "user")
        self.assertEqual(user_msg["content"], "Hello, how are you?")
        self.assertEqual(assistant_msg["role"], "assistant")
        self.assertEqual(assistant_msg["content"], "I'm doing well, thank you!")

    async def test_planner_operations(self):
        """Test planner Create, Read, Update operations."""
        # Create planner
        create_result = await self.db.create_planner(
            planner_id=self.planner_id,
            planner_name="Test Planner",
            user_question="What is the weather?",
            instruction="Check weather data",
            status="planning"
        )
        # Database create methods return None on success
        self.assertIsNone(create_result)
        
        # Read planner
        planner_data = await self.db.get_planner(self.planner_id)
        self.assertEqual(planner_data["planner_id"], self.planner_id)
        self.assertEqual(planner_data["planner_name"], "Test Planner")
        self.assertEqual(planner_data["user_question"], "What is the weather?")
        self.assertEqual(planner_data["status"], "planning")
        
        # Update planner
        execution_plan = "## Plan\n1. Check weather API\n2. Format response"
        update_result = await self.db.update_planner(
            self.planner_id,
            status="executing",
            execution_plan=execution_plan
        )
        # Database update methods return True on success
        self.assertTrue(update_result)
        
        # Verify update
        updated_data = await self.db.get_planner(self.planner_id)
        self.assertEqual(updated_data["status"], "executing")
        self.assertEqual(updated_data["execution_plan"], execution_plan)

    async def test_json_column_operations(self):
        """Test JSON column storage and retrieval."""
        # Create planner with JSON data
        await self.db.create_planner(
            planner_id=self.planner_id,
            planner_name="JSON Test Planner",
            user_question="Test question",
            instruction="Test instruction",
            status="planning"
        )
        
        # Test variable file paths (JSON column)
        variable_paths = {
            "analysis_results": "/path/to/analysis.pkl",
            "chart_data": "/path/to/chart.pkl",
            "summary": "/path/to/summary.pkl"
        }
        
        # Test image file paths (JSON column)
        image_paths = {
            "chart1": "/path/to/chart1.b64", 
            "diagram": "/path/to/diagram.b64"
        }
        
        # Update with JSON data
        update_result = await self.db.update_planner(
            self.planner_id,
            variable_file_paths=variable_paths,
            image_file_paths=image_paths
        )
        # Database update methods return True on success
        self.assertTrue(update_result)
        
        # Retrieve and verify JSON data
        planner_data = await self.db.get_planner(self.planner_id)
        
        self.assertEqual(planner_data["variable_file_paths"], variable_paths)
        self.assertEqual(planner_data["image_file_paths"], image_paths)
        
        # Test partial JSON updates
        updated_variable_paths = {
            "analysis_results": "/new/path/to/analysis.pkl",
            "new_variable": "/path/to/new.pkl"
        }
        
        await self.db.update_planner(
            self.planner_id,
            variable_file_paths=updated_variable_paths
        )
        
        updated_data = await self.db.get_planner(self.planner_id)
        self.assertEqual(updated_data["variable_file_paths"], updated_variable_paths)
        # Image paths should remain unchanged
        self.assertEqual(updated_data["image_file_paths"], image_paths)

    async def test_worker_operations(self):
        """Test worker/task operations."""
        # Create planner first
        await self.db.create_planner(
            planner_id=self.planner_id,
            planner_name="Test Planner",
            user_question="Test question",
            instruction="Test instruction",
            status="executing"
        )
        
        # Create worker
        create_result = await self.db.create_worker(
            worker_id=self.worker_id,
            planner_id=self.planner_id,
            worker_name="Test Worker",
            task_status="created",
            task_description="Process data files",
            acceptance_criteria=["Data processed", "Results validated"],
            user_request="Process the uploaded data",
            wip_answer_template="## Results\n[Processing...]",
            task_result="",
            querying_structured_data=True,
            image_keys=["chart1", "chart2"],
            variable_keys=["data", "analysis"],
            tools=["data_processor", "chart_generator"],
            input_variable_filepaths={"data": "/path/to/data.pkl"},
            input_image_filepaths={"chart": "/path/to/chart.b64"},
            tables=[{"name": "sales_data", "rows": 1000}],
            filepaths=["/path/to/document.pdf"]
        )
        # Database create methods return None on success
        self.assertIsNone(create_result)
        
        # Get worker
        worker_data = await self.db.get_worker(self.worker_id)
        self.assertEqual(worker_data["worker_id"], self.worker_id)
        self.assertEqual(worker_data["planner_id"], self.planner_id)
        self.assertEqual(worker_data["task_status"], "created")
        self.assertEqual(worker_data["task_description"], "Process data files")
        
        # Test JSON fields
        self.assertEqual(worker_data["acceptance_criteria"], ["Data processed", "Results validated"])
        self.assertEqual(worker_data["image_keys"], ["chart1", "chart2"])
        self.assertEqual(worker_data["variable_keys"], ["data", "analysis"])
        self.assertEqual(worker_data["tools"], ["data_processor", "chart_generator"])
        self.assertEqual(worker_data["input_variable_filepaths"], {"data": "/path/to/data.pkl"})
        self.assertEqual(worker_data["input_image_filepaths"], {"chart": "/path/to/chart.b64"})
        
        # Get workers by planner
        planner_workers = await self.db.get_workers_by_planner(self.planner_id)
        self.assertEqual(len(planner_workers), 1)
        self.assertEqual(planner_workers[0]["worker_id"], self.worker_id)

    async def test_task_queue_operations(self):
        """Test task queue CRUD operations."""
        task_id = f"test_task_{uuid.uuid4().hex[:8]}"
        
        # Enqueue task
        enqueue_result = await self.db.enqueue_task(
            task_id=task_id,
            entity_type="planner",
            entity_id=self.planner_id,
            function_name="execute_initial_planning",
            payload={"user_question": "Test question", "files": []}
        )
        self.assertTrue(enqueue_result)
        
        # Get pending tasks
        pending_tasks = await self.db.get_pending_tasks()
        self.assertEqual(len(pending_tasks), 1)
        
        task = pending_tasks[0]
        self.assertEqual(task["task_id"], task_id)
        self.assertEqual(task["entity_type"], "planner")
        self.assertEqual(task["entity_id"], self.planner_id)
        self.assertEqual(task["function_name"], "execute_initial_planning")
        self.assertEqual(task["status"], "PENDING")
        
        # Update task status
        update_result = await self.db.update_task_status(task_id, "IN_PROGRESS")
        # Database update methods return True on success
        self.assertTrue(update_result)
        
        # Verify status update
        updated_tasks = await self.db.get_pending_tasks()
        self.assertEqual(len(updated_tasks), 0)  # Should not be in pending anymore
        
        # Complete task
        complete_result = await self.db.update_task_status(task_id, "COMPLETED")
        self.assertTrue(complete_result)

    async def test_message_planner_linking(self):
        """Test Schema V2 message-planner linking."""
        # Create router and add messages
        await self.db.create_router(
            router_id=self.router_id,
            status="active",
            model="gpt-4",
            temperature=0.7,
            title="Test Router",
            preview="Test preview"
        )
        
        user_message_id = await self.db.add_message(
            "router", self.router_id, "user", "Analyze this data"
        )
        
        assistant_message_id = await self.db.add_message(
            "router", self.router_id, "assistant", "I'll analyze the data for you."
        )
        
        # Create planner
        await self.db.create_planner(
            planner_id=self.planner_id,
            planner_name="Data Analysis Planner",
            user_question="Analyze this data",
            instruction="Perform comprehensive data analysis",
            status="planning"
        )
        
        # Link planner to specific message
        link_result = await self.db.link_message_planner(
            self.router_id, assistant_message_id, self.planner_id
        )
        self.assertTrue(link_result)
        
        # Get planner by message
        planner_info = await self.db.get_planner_by_message(assistant_message_id)
        self.assertIsNotNone(planner_info)
        self.assertEqual(planner_info["planner_id"], self.planner_id)
        self.assertEqual(planner_info["message_id"], assistant_message_id)
        self.assertEqual(planner_info["router_id"], self.router_id)

    async def test_concurrent_database_access(self):
        """Test concurrent database operations work correctly."""
        # Create multiple routers concurrently
        async def create_test_router(index):
            router_id = f"concurrent_router_{index}"
            return await self.db.create_router(
                router_id=router_id,
                status="active",
                model="gpt-4",
                temperature=0.7,
                title=f"Router {index}",
                preview=f"Concurrent router {index}"
            )
        
        # Run 5 concurrent operations
        results = await asyncio.gather(
            *[create_test_router(i) for i in range(5)]
        )
        
        # All operations should succeed (create methods return None)
        self.assertTrue(all(result is None for result in results))
        
        # Verify all routers were actually created
        for i in range(5):
            router_data = await self.db.get_router(f"concurrent_router_{i}")
            self.assertIsNotNone(router_data)
            self.assertEqual(router_data["router_id"], f"concurrent_router_{i}")
            self.assertEqual(router_data["title"], f"Router {i}")

    async def test_database_error_handling(self):
        """Test database error handling for invalid operations."""
        # Try to get non-existent router
        router_data = await self.db.get_router("non_existent_router")
        self.assertIsNone(router_data)
        
        # Try to get non-existent planner
        planner_data = await self.db.get_planner("non_existent_planner")
        self.assertIsNone(planner_data)
        
        # Try to update non-existent planner
        update_result = await self.db.update_planner(
            "non_existent_planner",
            status="completed"
        )
        self.assertFalse(update_result)

    async def test_schema_migration_simulation(self):
        """Test schema migration functionality."""
        # Create a fresh database to test migration
        temp_fd, temp_path = tempfile.mkstemp(suffix='.db')
        os.close(temp_fd)
        
        try:
            # Create database (should run migrations)
            test_db = AgentDatabase(database_path=temp_path)
            
            # Verify tables exist after migration
            # This tests that the database initialisation worked
            result = await test_db.create_router(
                router_id="migration_test_router",
                status="active",
                model="gpt-4",
                temperature=0.7,
                title="Migration Test",
                preview="Test migration"
            )
            self.assertTrue(result)
            
            # Verify Schema V2 features work
            message_id = await test_db.add_message(
                "router", "migration_test_router", "user", "Test message"
            )
            self.assertIsInstance(message_id, int)
            
        finally:
            try:
                os.unlink(temp_path)
            except (OSError, FileNotFoundError):
                pass

    async def test_entity_isolation(self):
        """Test that different entities are properly isolated."""
        # Create multiple planners
        planner_1 = f"{self.planner_id}_1"
        planner_2 = f"{self.planner_id}_2"
        
        await self.db.create_planner(
            planner_id=planner_1,
            planner_name="Planner 1",
            user_question="Question 1",
            instruction="Instruction 1",
            status="planning"
        )
        
        await self.db.create_planner(
            planner_id=planner_2,
            planner_name="Planner 2", 
            user_question="Question 2",
            instruction="Instruction 2",
            status="executing"
        )
        
        # Create workers for each planner
        worker_1 = f"{self.worker_id}_1"
        worker_2 = f"{self.worker_id}_2"
        
        await self.db.create_worker(
            worker_id=worker_1,
            planner_id=planner_1,
            worker_name="Worker 1",
            task_status="created",
            task_description="Task 1",
            acceptance_criteria=["Criteria 1"],
            user_request="Request 1",
            wip_answer_template="Template 1",
            task_result="",
            querying_structured_data=False,
            image_keys=[],
            variable_keys=[],
            tools=[],
            input_variable_filepaths={},
            input_image_filepaths={},
            tables=[],
            filepaths=[]
        )
        
        await self.db.create_worker(
            worker_id=worker_2,
            planner_id=planner_2,
            worker_name="Worker 2",
            task_status="created",
            task_description="Task 2",
            acceptance_criteria=["Criteria 2"],
            user_request="Request 2",
            wip_answer_template="Template 2",
            task_result="",
            querying_structured_data=False,
            image_keys=[],
            variable_keys=[],
            tools=[],
            input_variable_filepaths={},
            input_image_filepaths={},
            tables=[],
            filepaths=[]
        )
        
        # Verify entity isolation
        planner_1_workers = await self.db.get_workers_by_planner(planner_1)
        planner_2_workers = await self.db.get_workers_by_planner(planner_2)
        
        self.assertEqual(len(planner_1_workers), 1)
        self.assertEqual(len(planner_2_workers), 1)
        
        self.assertEqual(planner_1_workers[0]["worker_id"], worker_1)
        self.assertEqual(planner_2_workers[0]["worker_id"], worker_2)
        
        # Workers should belong to correct planners
        self.assertEqual(planner_1_workers[0]["planner_id"], planner_1)
        self.assertEqual(planner_2_workers[0]["planner_id"], planner_2)

    async def test_file_path_storage_variables_only(self):
        """Test storing variable file paths specifically."""
        # Create planner first
        await self.db.create_planner(
            planner_id=self.planner_id,
            planner_name="File Path Test Planner",
            user_question="Test question",
            instruction="Test instruction",
            status="planning"
        )
        
        # Test variable paths with special characters
        variable_paths = {
            "var1": "/path/to/var1.pkl",
            "var2": "/path/to/var2.pkl",
            "special_var": "/path/with spaces/special.pkl",
            "unicode_var": "/path/with/unicode_文件.pkl"
        }
        
        # Update variable paths only
        update_result = await self.db.update_planner(
            self.planner_id,
            variable_file_paths=variable_paths
        )
        # Database update methods return True on success
        self.assertTrue(update_result)
        
        # Verify paths were stored correctly
        planner_data = await self.db.get_planner(self.planner_id)
        self.assertEqual(planner_data["variable_file_paths"], variable_paths)
        self.assertEqual(planner_data["image_file_paths"], {})  # Should remain empty

    async def test_file_path_storage_images_only(self):
        """Test storing image file paths specifically."""
        # Create planner first
        await self.db.create_planner(
            planner_id=self.planner_id,
            planner_name="Image Path Test Planner",
            user_question="Test question",
            instruction="Test instruction",
            status="planning"
        )
        
        # Test image paths with special characters
        image_paths = {
            "img1": "/path/to/img1.b64",
            "img2": "/path/to/img2.b64",
            "special-img": "/path/with-dashes/special.b64",
            "unicode_img": "/path/with/unicode_图片.b64"
        }
        
        # Update image paths only
        update_result = await self.db.update_planner(
            self.planner_id,
            image_file_paths=image_paths
        )
        # Database update methods return True on success
        self.assertTrue(update_result)
        
        # Verify paths were stored correctly
        planner_data = await self.db.get_planner(self.planner_id)
        self.assertEqual(planner_data["image_file_paths"], image_paths)
        self.assertEqual(planner_data["variable_file_paths"], {})  # Should remain empty

    async def test_file_path_storage_both_types(self):
        """Test storing both variable and image file paths together."""
        # Create planner first
        await self.db.create_planner(
            planner_id=self.planner_id,
            planner_name="Combined Path Test Planner",
            user_question="Test question",
            instruction="Test instruction",
            status="planning"
        )
        
        variable_paths = {
            "analysis": "/data/analysis_results.pkl",
            "summary": "/data/summary_data.pkl"
        }
        
        image_paths = {
            "chart1": "/images/revenue_chart.b64",
            "diagram": "/images/flow_diagram.b64"
        }
        
        # Update both types at once
        update_result = await self.db.update_planner(
            self.planner_id,
            variable_file_paths=variable_paths,
            image_file_paths=image_paths
        )
        # Database update methods return True on success
        self.assertTrue(update_result)
        
        # Verify both were stored correctly
        planner_data = await self.db.get_planner(self.planner_id)
        self.assertEqual(planner_data["variable_file_paths"], variable_paths)
        self.assertEqual(planner_data["image_file_paths"], image_paths)

    async def test_file_path_overwrite_behaviour(self):
        """Test file path overwrite behaviour."""
        # Create planner first
        await self.db.create_planner(
            planner_id=self.planner_id,
            planner_name="Overwrite Test Planner",
            user_question="Test question",
            instruction="Test instruction",
            status="planning"
        )
        
        # Set initial paths
        initial_variable_paths = {"var1": "/initial/path1.pkl", "var2": "/initial/path2.pkl"}
        await self.db.update_planner(
            self.planner_id,
            variable_file_paths=initial_variable_paths
        )
        
        # Overwrite with new paths
        new_variable_paths = {"var1": "/new/path1.pkl", "var3": "/new/path3.pkl"}
        await self.db.update_planner(
            self.planner_id,
            variable_file_paths=new_variable_paths
        )
        
        # Verify paths were completely replaced (not merged)
        planner_data = await self.db.get_planner(self.planner_id)
        self.assertEqual(planner_data["variable_file_paths"], new_variable_paths)
        self.assertNotIn("var2", planner_data["variable_file_paths"])  # Should be gone


if __name__ == '__main__':
    unittest.main(verbosity=2)